// Generated by CoffeeScript 1.10.0
angular.module('starter.controllers', []).controller('AppCtrl', function($scope, $state, $window, $ionicModal, $ionicPopup, UserService, EVENTS) {
  $scope.loginData = {};
  $scope.isFormLoading = false;
  $scope.isAuthenticated = UserService.isCurrentUserAuthenticated();
  $ionicModal.fromTemplateUrl('templates/signin.html', {
    scope: $scope
  }).then(function(modal) {
    $scope.signInModal = modal;
    $scope.openLoginIfNotAuth();
  });
  $ionicModal.fromTemplateUrl('templates/signup.html', {
    scope: $scope
  }).then(function(modal) {
    $scope.signUpModal = modal;
  });
  $scope.signin = function() {
    return $scope.signInModal.show();
  };
  $scope.closeSignin = function() {
    $scope.signInModal.hide();
    return $scope.isAuthenticated = UserService.isCurrentUserAuthenticated();
  };
  $scope.signup = function() {
    return $scope.signUpModal.show();
  };
  $scope.closeSignup = function() {
    return $scope.signUpModal.hide();
  };
  $scope.doLogin = function() {
    $scope.isFormLoading = true;
    return _.delay((function() {
      var req;
      req = UserService.authenticate($scope.loginData.username, $scope.loginData.password);
      req.then((function(response) {
        console.log(response);
        $scope.loginData = {};
        $scope.isFormLoading = false;
        return $scope.closeSignin();
      }), (function(response) {
        $scope.isFormLoading = false;
        return $scope.showPopup('Login failed', 'Incorrect Username or Password.');
      }));
    }), 1000);
  };
  $scope.doSignUp = function() {
    $scope.isFormLoading = true;
    return _.delay((function() {
      var req;
      req = UserService.create($scope.loginData.username, $scope.loginData.password, $scope.loginData.email);
      req.then((function(response) {
        console.log(response);
        $scope.loginData = {};
        $scope.isFormLoading = false;
        $scope.closeSignin();
        return $scope.closeSignup();
      }), (function(response) {
        console.log(response);
        $scope.isFormLoading = false;
        return $scope.showPopup('Register failed', response.data.message);
      }));
    }), 1000);
  };
  $scope.doLogout = function() {
    UserService.logout();
    return $scope.signin();
  };
  $scope.showPopup = function(title, message) {
    return $ionicPopup.alert({
      title: title,
      template: message,
      buttons: [
        {
          text: 'Close',
          type: 'button-assertive'
        }
      ]
    });
  };
  $scope.openLoginIfNotAuth = function() {
    if (!$scope.isAuthenticated) {
      return $scope.signin();
    }
  };
  $scope.$on(EVENTS.login.close, function(event) {
    console.log("close login modal");
    return $scope.closeSignin();
  });
  $scope.$on(EVENTS.auth.notAuthenticated, function(event) {
    return $scope.signin();
  });
}).controller('NodesController', function($scope, $stateParams, $ionicLoading, NodeService, EVENTS) {
  console.log("I'm inside NodesController");
  $scope.nodes = [];
  $scope.onlyOnlineNodes = true;
  $scope.isLoading = false;
  $scope.onRefresh = function() {
    var req;
    req = NodeService.getNodes();
    return req.then(function(response) {
      $scope.nodes = response;
      console.log($scope.nodes);
      return _.delay((function() {
        $scope.$broadcast('scroll.refreshComplete');
      }), 1000);
    });
  };
  $scope.loadNodes = function() {
    var req;
    $ionicLoading.show({
      template: '<ion-spinner icon="android"></ion-spinner>'
    });
    req = NodeService.getNodes();
    return req.then((function(response) {
      $scope.nodes = response;
      console.log($scope.nodes);
      return $ionicLoading.hide();
    }), (function(response) {
      return $ionicLoading.hide();
    }));
  };
  $scope.loadNodes();
  return $scope.$on(EVENTS.auth.authenticated, function(event) {
    return $scope.loadNodes();
  });
}).controller('SensorController', function($scope, $stateParams, sensor, readings, SensorService) {
  $scope.options = {
    animation: false
  };
  $scope.sensor = sensor;
  $scope.readings = _.map(readings, function(r) {
    return {
      name: r.name,
      labels: _.keys(r.values),
      data: [_.values(r.values)]
    };
  });
  $scope.series = [sensor.measurementName];
  $scope.onClick = function(points, evt) {
    return console.log(points, evt);
  };
  $scope.onRefresh = function() {
    var query;
    query = SensorService.getReadings($stateParams);
    return query.then(function(response) {
      $scope.readings = _.map(response, function(r) {
        return {
          name: r.name,
          labels: _.keys(r.values),
          data: [_.values(r.values)]
        };
      });
      console.log($scope.readings);
      return _.delay((function() {
        $scope.$broadcast('scroll.refreshComplete');
      }), 1000);
    });
  };
}).controller('NodeDetailsController', function($scope, node, NodeService) {
  console.log(node);
  $scope.node = node;
  $scope.toggleLight = function() {
    var query;
    console.log("toggle");
    query = NodeService.toggleLight(node.id, node.lightOn);
    return query.then(function(response) {
      return console.log(response);
    });
  };
  return $scope.toggleWater = function() {
    var query;
    console.log("toggle");
    query = NodeService.toggleWater(node.id, node.waterOn);
    return query.then(function(response) {
      return console.log(response);
    });
  };
});
