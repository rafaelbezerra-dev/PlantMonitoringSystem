// Generated by CoffeeScript 1.10.0
angular.module('starter.services', []).service("UserService", function($http) {
  var LOCAL_TOKEN_KEY, currentUser, endpoints, isAuthenticated;
  LOCAL_TOKEN_KEY = "TEST_LOCAL_KEY";
  currentUser = isAuthenticated = false;
  endpoints = {
    host: 'http://localhost:85',
    authenticate: function() {
      return endpoints.host + "/api/user/authenticate";
    }
  };
  this.authenticate = function(username, pass) {
    var req, user;
    user = {
      username: username,
      pass: pass
    };
    req = $http.post(endpoints.authenticate(), user);
    return req.then(function(result) {
      var authUser;
      authUser = result.data;
      window.localStorage.setItem(LOCAL_TOKEN_KEY, authUser.token);
      $http.defaults.headers.common['X-Auth-Token'] = authUser.token;
      currentUser.isAuthenticated = true;
      return result.data;
    });
  };
  this.logout = function() {
    currentUser.isAuthenticated = false;
    $http.defaults.headers.common['X-Auth-Token'] = void 0;
    return window.localStorage.removeItem(LOCAL_TOKEN_KEY);
  };
  this.isCurrentUserAuthenticated = function() {
    console.log(window.localStorage.getItem(LOCAL_TOKEN_KEY));
    return true;
  };
  this.getUser = function(userId) {
    var req;
    req = $http.get("http://localhost:85/api/user/1");
    return req.then(function(result) {
      return result.data;
    });
  };
  return this;
}).service("NodeService", function($http) {
  var endpoints;
  endpoints = {
    host: 'http://localhost:85',
    getNodes: function() {
      return endpoints.host + "/api/view/nodes";
    },
    getNodeDetails: function(params) {
      return endpoints.host + "/api/node/" + params.nodeId;
    },
    toggleLight: function(id, status) {
      return endpoints.host + "/api/node/" + id + "/light/" + status;
    },
    toggleWater: function(id, status) {
      return endpoints.host + "/api/node/" + id + "/water/" + status;
    }
  };
  this.getNodes = function() {
    var req;
    req = $http.get(endpoints.getNodes());
    return req.then(function(result) {
      return result.data;
    });
  };
  this.getNodeDetails = function(params) {
    var req;
    req = $http.get(endpoints.getNodeDetails(params));
    return req.then(function(result) {
      return result.data;
    });
  };
  this.toggleLight = function(id, status) {
    var req;
    req = $http.post(endpoints.toggleLight(id, status));
    return req.then(function(result) {
      return result.data;
    });
  };
  this.toggleWater = function(id, status) {
    var req;
    req = $http.post(endpoints.toggleWater(id, status));
    return req.then(function(result) {
      return result.data;
    });
  };
  return this;
}).service("SensorService", function($http) {
  var endpoints;
  endpoints = {
    host: 'http://localhost:85',
    getSensor: function(params) {
      return endpoints.host + "/api/sensor/" + params.sensorId;
    },
    getReadings: function(params) {
      return endpoints.host + "/api/view/sensor/" + params.sensorId + "/readings";
    }
  };
  this.getSensor = function(params) {
    var req;
    req = $http.get(endpoints.getSensor(params));
    return req.then(function(result) {
      return result.data;
    });
  };
  this.getReadings = function(params) {
    var req;
    req = $http.get(endpoints.getReadings(params));
    return req.then(function(result) {
      return result.data;
    });
  };
  return this;
}).factory("AuthInspector", function($rootScope, $q, AUTH_EVENTS) {
  return {
    responseError: function(response) {
      $rootScope.$broadcast({
        401: AUTH_EVENTS.notAuthenticated,
        403: AUTH_EVENTS.notAuthorized
      }, [response.status], response);
      return $q.reject(response);
    }
  };
}).config(function($httpProvider) {
  return $httpProvider.interceptors.push('AuthInspector');
});
